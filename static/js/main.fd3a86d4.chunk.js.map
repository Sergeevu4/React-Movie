{"version":3,"sources":["img/imgNotFound.png","reducers/movieListReducer.js","reducers/movieWillWatchListReducer.js","reducers/pageReducer.js","reducers/sortTypeByMovieReducer.js","store.js","actions/actionTypes.js","components/Error/Error.jsx","components/Spinner/Spinner.jsx","components/Button/Button.jsx","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","components/MovieTabs/MovieTabs.jsx","components/MovieWillWatch/MovieWillWatch.jsx","components/Pagination/Pagination.jsx","actions/actionsUtils.js","actions/actions.js","services/MovieService.js","containers/MovieListContainer/MovieListContainer.jsx","containers/MovieTabsContainer/MovieTabsContainer.jsx","containers/MovieWillWatchContainer/MovieWillWatchContainer.jsx","containers/PaginationContainer/PaginationContainer.jsx","containers/PaginationContainer/getPaginationNumbers.js","components/App/App.jsx","index.js"],"names":["module","exports","initialState","movies","loading","error","movieWillWatch","page","totalPages","sortTypeByMovies","persistConfig","key","storage","rootReducer","combineReducers","movieList","state","action","type","payload","filter","movie","id","map","willWatch","pageInfo","sortType","movieWillWatchList","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","persistor","persistStore","Error","className","role","Spinner","memo","onClick","children","MovieItem","removeMovie","onMovieAddedToWillWatch","onMovieRemovedToWillWatch","toggleButton","imgPath","backdrop_path","poster_path","img","imgNotFound","src","alt","title","vote_average","MovieList","movieRemoved","movieAddedToWillWatch","movieRemovedToWillWatch","_evt","tabs","changeSortType","handleClick","getClassActive","classNames","active","label","MovieWillWatch","allMoviesDeletedToWillWatch","resetButton","length","Pagination","pageNumbers","setFirstPage","setLastPage","setNextPage","setPrevPage","setNumbersPage","handelClick","fn","args","evt","preventDefault","getClass","currentPage","href","aria-hidden","pageNumber","togglePropertyWillWatch","checkPropertyWillWatch","idMoviesWillWatch","item","reduce","newMovies","includes","concat","moviesLoaded","movieToggleProperty","setTotalPages","total","dispatch","getState","updateMovie","movieService","_apiUrl","_apiKey","_apiSort","popularity","revenue","voteAverage","default","getResource","a","sort","getSortTypes","fetch","response","ok","status","json","data","cleanData","total_pages","results","total_results","otherDataProperty","this","addPropertyWillWatch","totalResults","fetchMovies","verifiedMovies","MovieListContainer","updateMovies","prevProps","props","getMovies","Component","mapDispatchToProps","movieId","connect","MovieTabsContainer","moviesChangeSort","MovieWillWatchContainer","PaginationContainer","maxPages","setCurrentPage","Math","min","max","startPage","endPage","middle","floor","right","left","compensationEnd","Array","from","_","i","getPaginationNumbers","App","ReactDOM","render","document","getElementById"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,yC,sKCSrCC,EAAe,CACnBC,OAAQ,GACRC,SAAS,EACTC,MAAO,M,QCNHH,EAAe,CACnBI,eAAgB,ICLZJ,EAAe,CACnBK,KAAM,EACNC,WAAY,GCFRN,EAAe,CACnBO,iBAAkB,cCcdC,EAAgB,CACpBC,IAAK,qBACLC,aAGIC,EAAcC,0BAAgB,CAClCC,UJR8B,WAAmC,IAAlCC,EAAiC,uDAAzBd,EAAce,EAAW,uCAChE,OAAQA,EAAOC,MACb,IKhBgC,uBLiB9B,MAAO,CACLf,OAAQ,GACRC,SAAS,EACTC,MAAO,MAGX,IKrBgC,uBLsB9B,MAAO,CACLF,OAAQc,EAAOE,QACff,SAAS,EACTC,MAAO,MAGX,IK1BgC,uBL2B9B,MAAO,CACLF,OAAQ,GACRC,SAAS,EACTC,MAAOY,EAAOE,SAGlB,IK7BwB,eL8BtB,OAAO,eACFH,EADL,CAEEb,OAAQa,EAAMb,OAAOiB,QAAO,SAACC,GAAD,OAAWA,EAAMC,KAAOL,EAAOE,aAG/D,IKjC4C,mCLkC1C,OAAO,eACFH,EADL,CAEEb,OAAQa,EAAMb,OAAOoB,KAAI,SAACF,GACxB,OAAIA,EAAMC,KAAOL,EAAOE,QAAQG,GACvBL,EAAOE,QAETE,OAIb,IK1C2C,kCL2CzC,OAAO,eACFL,EADL,CAEEb,OAAQa,EAAMb,OAAOoB,KAAI,SAACF,GAAD,sBACpBA,EADoB,CAEvBG,WAAW,SAIjB,QACE,OAAOR,IIzCXS,SFjByB,WAAmC,IAAlCT,EAAiC,uDAAzBd,EAAce,EAAW,uCAC3D,OAAQA,EAAOC,MACb,IGe2B,kBHdzB,OAAO,eACFF,EADL,CAEER,WAAYS,EAAOE,UAGvB,IGC4B,mBHA1B,OAAO,eACFH,EADL,CAEET,KAAMU,EAAOE,UAGjB,QACE,OAAOH,IEGXU,SDnBoC,WAAmC,IAAlCV,EAAiC,uDAAzBd,EAAce,EAAW,uCACtE,OAAQA,EAAOC,MACb,IED4C,mCFE1C,MAAO,CACLT,iBAAkBQ,EAAOE,SAG7B,QACE,OAAOH,ICYXW,mBAAoBC,YAAelB,GHhBI,WAAmC,IAAlCM,EAAiC,uDAAzBd,EAAce,EAAW,uCACzE,OAAQA,EAAOC,MACb,IIMgC,uBJL9B,MAAO,CACLZ,eAAe,GAAD,mBAAMU,EAAMV,gBAAZ,CAA4BW,EAAOE,WAGrD,IIGmC,0BJFjC,MAAO,CACLb,eAAgBU,EAAMV,eAAec,QACnC,SAACC,GAAD,OAAWA,EAAMC,KAAOL,EAAOE,QAAQG,OAI7C,IIFuC,8BJGrC,MAAO,CACLhB,eAAgB,IAGpB,QACE,OAAOU,QGDAa,EAAQC,sBACnBjB,EACAkB,8BAAoBC,0BAAgBC,OAGzBC,EAAYC,YAAaN,G,mDEhCzBO,EAAQ,kBACnB,yBAAKC,UAAU,sBAAsBC,KAAK,SAA1C,UCDWC,EAAU,WACrB,OACE,yBAAKF,UAAU,iCACb,yBAAKA,UAAU,sBAAsBC,KAAK,UACxC,0BAAMD,UAAU,WAAhB,iBCIOG,kBARA,SAAC,GAA2C,IAAD,IAAxCH,iBAAwC,MAA5B,GAA4B,EAAxBI,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACzC,OACE,4BAAQxB,KAAK,SAASmB,UAAS,qBAAgBA,GAAaI,QAASA,GAClEC,M,iBCDMC,EAAY,SAAC,GAKnB,IAJLtB,EAII,EAJJA,MACAuB,EAGI,EAHJA,YACAC,EAEI,EAFJA,wBACAC,EACI,EADJA,0BAEMC,EAAe1B,EAAMG,UACzB,kBAAC,EAAD,CAAQa,UAAU,aAAaI,QAASK,GAAxC,qBAIA,kBAAC,EAAD,CAAQT,UAAU,cAAcI,QAASI,GAAzC,kBAKIG,EAAU3B,EAAM4B,eAAiB5B,EAAM6B,YACvCC,EAAMH,EAAO,yCAAqCA,GAAYI,IAEpE,OACE,yBAAKf,UAAU,QACb,yBAAKA,UAAU,eAAegB,IAAKF,EAAKG,IAAKjC,EAAMkC,QAEnD,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,cAAchB,EAAMkC,OAElC,yBAAKlB,UAAU,yDACb,uBAAGA,UAAU,QAAb,WAA6BhB,EAAMmC,cAElCT,GAGH,kBAAC,EAAD,CAAQV,UAAU,gBAAgBI,QAASG,GAA3C,mBCjCKa,EAAY,SAAC,GAKnB,IAJLtD,EAII,EAJJA,OACAuD,EAGI,EAHJA,aACAC,EAEI,EAFJA,sBACAC,EACI,EADJA,wBAEMf,EAA0B,SAACxB,GAAD,OAAW,SAACwC,GAAD,OAAUF,EAAsBtC,KAErEyB,EAA4B,SAACzB,GAAD,OAAW,SAACwC,GAAD,OAAUD,EAAwBvC,KAI/E,OACE,yBAAKgB,UAAU,YACZlC,EAAOoB,KAAI,SAACF,GACX,OACE,yBAAKgB,UAAU,aAAa1B,IAAKU,EAAMC,IACrC,kBAAC,EAAD,CACED,MAAOA,EACPuB,aATYtB,EASgBD,EAAMC,GATf,SAACuC,GAAD,OAAUH,EAAapC,KAU1CuB,wBAAyBA,EAAwBxB,GACjDyB,0BAA2BA,EAA0BzB,MAX1C,IAACC,O,iBCSXkB,kBAnBG,SAAC,GAAgD,IAA9CsB,EAA6C,EAA7CA,KAAMrD,EAAuC,EAAvCA,iBAAkBsD,EAAqB,EAArBA,eACrCC,EAAc,SAACtC,GAAD,OAAc,SAACmC,GAAD,OAAUE,EAAerC,KAErDuC,EAAiB,SAACvC,GAAD,OACrBwC,IAAW,WAAY,CAAEC,OAAQ1D,IAAqBiB,KAExD,OACE,wBAAIW,UAAU,sBACXyB,EAAKvC,KAAI,gBAAGG,EAAH,EAAGA,SAAU0C,EAAb,EAAaA,MAAb,OACR,wBAAI/B,UAAU,WAAW1B,IAAKe,GAC5B,yBAAKW,UAAW4B,EAAevC,GAAWe,QAASuB,EAAYtC,IAC5D0C,WCXAC,EAAiB,SAAC,GAIxB,IAHL/D,EAGI,EAHJA,eACAsD,EAEI,EAFJA,wBACAU,EACI,EADJA,4BAEMxB,EAA4B,SAACzB,GAAD,OAAW,SAACwC,GAAD,OAAUD,EAAwBvC,KAEzEkD,EAAcjE,EAAekE,OACjC,kBAAC,EAAD,CAAQnC,UAAU,gBAAgBI,QAAS6B,GAA3C,SAGE,KAEJ,OACE,yBAAKjC,UAAU,SACb,2CAAiB/B,EAAekE,OAAhC,WAECD,EAED,wBAAIlC,UAAU,+BACX/B,EAAeiB,KAAI,SAACF,GAAD,OAClB,wBAAIV,IAAKU,EAAMC,GAAIe,UAAU,mBAC3B,yBAAKA,UAAU,kCACb,2BAAIhB,EAAMkC,OACV,2BAAIlC,EAAMmC,eAGZ,kBAAC,EAAD,CAAQnB,UAAU,aAAaI,QAASK,EAA0BzB,IAAlE,kB,QC3BCoD,EAAa,SAAC,GASpB,IARLC,EAQI,EARJA,YACAnE,EAOI,EAPJA,KACAC,EAMI,EANJA,WACAmE,EAKI,EALJA,aACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YACAC,EACI,EADJA,eAEMC,EAAc,SAACC,GAAD,2BAAQC,EAAR,iCAAQA,EAAR,yBAAiB,SAACC,GACpCA,EAAIC,iBACJH,EAAE,WAAF,EAAMC,KAIFG,EAAW,SAAC9E,EAAM+E,EAAajD,GAApB,OACf6B,IAAW,YAAD,eACP7B,EAAY9B,IAAS+E,KAG1B,OACE,6BACE,wBAAIjD,UAAU,4CACZ,wBAAIA,UAAWgD,EAAS,EAAG9E,EAAM,aAC/B,uBAAGgF,KAAK,KAAKlD,UAAU,YAAYI,QAASuC,EAAYL,IAAxD,UAKF,wBAAItC,UAAWgD,EAAS,EAAG9E,EAAM,aAC/B,uBAAGgF,KAAK,KAAKlD,UAAU,YAAYI,QAASuC,EAAYF,IACtD,0BAAMU,cAAY,QAAlB,UAIHd,EAAYnD,KAAI,SAACkE,GAAD,OACf,wBAAI9E,IAAK8E,EAAYpD,UAAWgD,EAASI,EAAYlF,EAAM,WACzD,uBACEgF,KAAK,KACLlD,UAAU,YACVI,QAASuC,EAAYD,EAAgBU,IAEpCA,OAMP,wBAAIpD,UAAWgD,EAAS7E,EAAYD,EAAM,aACxC,uBAAGgF,KAAK,KAAKlD,UAAU,YAAYI,QAASuC,EAAYH,IACtD,0BAAMW,cAAY,QAAlB,UAIJ,wBAAInD,UAAWgD,EAAS7E,EAAYD,EAAM,aACxC,uBAAGgF,KAAK,KAAKlD,UAAU,YAAYI,QAASuC,EAAYJ,IAAxD,Y,wBC1DGc,EAA0B,SAACrE,GAAD,sBAClCA,EADkC,CAErCG,WAAYH,EAAMG,aAGPmE,EAAyB,SAACxF,EAAQG,GAE7C,IAAKA,EAAekE,OAClB,OAAOrE,EAIT,IAAMyF,EAAoBtF,EAAeiB,KAAI,SAACsE,GAAD,OAAUA,EAAKvE,MAG5D,OAAOnB,EAAO2F,QACZ,SAACC,EAAWF,GAAZ,OACED,EAAkBI,SAASH,EAAKvE,IAC5ByE,EAAUE,OAAV,eAAsBJ,EAAtB,CAA4BrE,WAAW,KACvCuE,EAAUE,OAAOJ,KACvB,K,QCKEK,EAAe,SAAC/F,GAAD,MAAa,CAChCe,KVxBkC,uBUyBlCC,QAAShB,IAgBLgG,EAAsB,SAAChG,GAAD,MAAa,CACvCe,KVlC8C,mCUmC9CC,QAAShB,IA+BLiG,EAAgB,SAACC,GAAD,OAAW,SAACC,EAAUC,GAAc,IAE1C/F,EACV+F,IADF9E,SAAYjB,WAGV6F,IAAU7F,GAId8F,EAAS,CACPpF,KV/D2B,kBUgE3BC,QAASkF,MAyBPzC,EAA0B,SAACvC,GAAD,OAAW,SAACiF,GAE1C,IAAME,EAAcd,EAAwBrE,GAG5CiF,EAASH,EAAoBK,IAE7BF,EAAS,CACPpF,KVrGmC,0BUsGnCC,QAASE,MAcPoF,EAAe,IChIrB,4DACEC,QAAU,+BADZ,KAEEC,QAAU,mCAFZ,KAKEC,SAAW,CAETC,WAAY,kBAEZC,QAAS,eAETC,YAAa,oBAEbC,QAAS,mBAbb,KAiBEC,YAjBF,uCAiBgB,WAAOvF,EAAUnB,GAAjB,mBAAA2G,EAAA,6DAENC,EAAO,EAAKC,aAAa1F,GAFnB,SAIW2F,MAAM,GAAD,OACvB,EAAKX,QADkB,mCACgB,EAAKC,QADrB,oBACwCQ,EADxC,iBACqD5G,IALrE,WAIN+G,EAJM,QAQEC,GARF,sBASJ,IAAInF,MAAJ,0BAA6B,EAAKsE,QAAlC,sBAAuDY,EAASE,SAT5D,uBAaOF,EAASG,OAbhB,cAaNC,EAbM,yBAgBL,EAAKC,UAAUD,IAhBV,4CAjBhB,iHAqC4E,IAA9DE,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,cAAkBC,EAAqB,yDACvE,OAAO,aACL5H,OAAQ6H,KAAKC,qBAAqBJ,GAClCrH,WAAYoH,EACZM,aAAcJ,GACXC,KA1CT,2CA8CuBF,GACnB,OAAOA,EAAQtG,KAAI,SAACF,GAAD,sBACdA,EADc,CAEjBG,WAAW,SAjDjB,mCAsDeE,GACX,OAAOsG,KAAKpB,SAASlF,IAAasG,KAAKpB,SAAL,YAvDtC,MD8IMuB,EAAc,SAAC1H,EAAkBF,EAAMD,GAAzB,8CAA4C,WAAOgG,GAAP,qBAAAY,EAAA,sEAG5DZ,EApI2B,CAC7BpF,KVrBkC,yBUqJ4B,SAMvBuF,EAAaQ,YAAYxG,EAAkBF,GANpB,gBAMpDJ,EANoD,EAMpDA,OAAQK,EAN4C,EAM5CA,WAIV4H,EAAiBzC,EAAuBxF,EAAQG,GAGtDgG,EAASJ,EAAakC,IAEtB9B,EAASF,EAAc5F,IAfqC,kDAiB5D8F,EAvI4B,CAC9BpF,KV5BkC,uBU6BlCC,QAqIuB,EAAD,KAjBwC,0DAA5C,uDE1IdkH,G,kLAEFL,KAAKM,iB,yCAGYC,GAEfA,EAAU9H,mBAAqBuH,KAAKQ,MAAM/H,kBAC1C8H,EAAUhI,OAASyH,KAAKQ,MAAMjI,MAE9ByH,KAAKM,iB,qCAMPN,KAAKQ,MAAMC,c,+BAGJ,MAWHT,KAAKQ,MANPrI,EALK,EAKLA,OACAC,EANK,EAMLA,QACAC,EAPK,EAOLA,MACAsD,EARK,EAQLA,sBACAC,EATK,EASLA,wBACAF,EAVK,EAULA,aAGF,OAAItD,EACK,kBAAC,EAAD,MAGLC,EACK,kBAAC,EAAD,MAMP,kBAAC,EAAD,CACEF,OAAQA,EACRwD,sBAAuBA,EACvBC,wBAAyBA,EACzBF,aAAcA,Q,GA/CWgF,aAmE3BC,GAAqB,CACzBF,UF2DgB,kBAAM,SAACnC,EAAUC,GAAc,IAAD,EAK1CA,IAHU9F,EAFgC,EAE5CiB,SAAYjB,iBACAF,EAHgC,EAG5CkB,SAAYlB,KACUD,EAJsB,EAI5CqB,mBAAsBrB,eAGxBgG,EAAS6B,EAAY1H,EAAkBF,EAAMD,MEjE7CoD,aF3CmB,SAACkF,GAAD,MAAc,CACjC1H,KV9B0B,eU+B1BC,QAASyH,IE0CTjF,sBFiB4B,SAACtC,GAAD,OAAW,SAACiF,GAExC,IAAME,EAAcd,EAAwBrE,GAG5CiF,EAASH,EAAoBK,IAE7BF,EAAS,CACPpF,KVzFgC,uBU0FhCC,QAASqF,MEzBX5C,2BAGaiF,gBArBS,SAAC,GAAuC,IAArC9H,EAAoC,EAApCA,UAAWU,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAK9C,MAAO,CACLvB,OALiCY,EAA3BZ,OAMNC,QANiCW,EAAnBX,QAOdC,MAPiCU,EAAVV,MAQvBE,KAPekB,EAATlB,KAQNE,iBAP2BiB,EAArBjB,oBAkB8BkI,GAAzBE,CAA6CR,ICjFtDS,G,4MAEJhF,KAAO,CACL,CAAEpC,SAAU,aAAc0C,MAAO,cACjC,CAAE1C,SAAU,UAAW0C,MAAO,gBAC9B,CAAE1C,SAAU,cAAe0C,MAAO,iB,EAGpCL,eAAiB,SAACrC,GAEZ,EAAK8G,MAAM/H,mBAAqBiB,GAIpC,EAAK8G,MAAMO,iBAAiBrH,I,uDAI5B,OACE,kBAAC,EAAD,CACEoC,KAAMkE,KAAKlE,KACXrD,iBAAkBuH,KAAKQ,MAAM/H,iBAC7BsD,eAAgBiE,KAAKjE,qB,GAtBI2E,aAgC3BC,GAAqB,CACzBI,iBHuDuB,SAACrH,GAAD,MAAe,CACtCR,KVvF8C,mCUwF9CC,QAASO,KGtDImH,gBARS,SAAC,GAAD,MAAyC,CAC/DpI,iBADsB,EAAGiB,SAAYjB,oBAQCkI,GAAzBE,CAA6CC,IClCtDE,G,uKACM,IAAD,EAKHhB,KAAKQ,MAHPlI,EAFK,EAELA,eACAsD,EAHK,EAGLA,wBACAU,EAJK,EAILA,4BAGF,OACE,kBAAC,EAAD,CACEhE,eAAgBA,EAChBsD,wBAAyBA,EACzBU,4BAA6BA,Q,GAZCoE,aAsBhCC,GAAqB,CACzB/E,0BACAU,4BJgGkC,kBAAM,SAACgC,GACzCA,EA9EiC,CACjCpF,KVtC6C,oCUqH7CoF,EAAS,CACPpF,KV7GuC,mCcY5B2H,gBATS,SAAC,GAAD,MAAiD,CACvEvI,eADsB,EAAGqB,mBAAsBrB,kBASTqI,GAAzBE,CAA6CG,I,IC5BtDC,G,4MACJC,SAAW,G,EAEXvE,aAAe,WAEb,EAAK6D,MAAMW,eADO,I,EAIpBvE,YAAc,WAAO,IAAD,EACqB,EAAK4D,MAApChI,EADU,EACVA,YACR2I,EAFkB,EACEA,gBACL3I,I,EAGjBqE,YAAc,WAAO,IAAD,EAC2B,EAAK2D,MAA1CW,EADU,EACVA,eAAgB5I,EADN,EACMA,KAAMC,EADZ,EACYA,WAE9B2I,EADiBC,KAAKC,IAAI9I,EAAO,EAAGC,K,EAItCsE,YAAc,WAAO,IAAD,EACe,EAAK0D,MAA9BjI,EADU,EACVA,MAGR4I,EAJkB,EACJA,gBAEGC,KAAKE,IAAI/I,EAAO,EADf,K,EAKpBwE,eAAiB,SAACO,GAChB,EAAKkD,MAAMW,eAAe7D,I,uDAGlB,IAAD,EACsB0C,KAAKQ,MAA1BjI,EADD,EACCA,KAAMC,EADP,EACOA,WACRkE,ECpCH,SAA8BnE,EAAMC,GAA4B,IAMjE+I,EACAC,EAPiDN,EAAe,uDAAJ,GAS1DO,EAASL,KAAKM,MAAMR,EAAW,GAE/BS,EAAQF,EAAS,EACjBG,EAAOH,EAAS,EAGtB,GAAIjJ,GAAc0I,EAChBK,EAAY,EACZC,EAAUhJ,OAGV,GAAID,GAAQoJ,EACVJ,EAAY,EACZC,EAAUN,OAIL,GAAI3I,EAAOqJ,GAAQpJ,EACxB+I,EAAY/I,GAAc0I,EAAW,GACrCM,EAAUhJ,MAGL,CAEL,IAAMqJ,EAAkBX,EAAW,IAAM,EAAIO,EAASG,EAEtDL,EAAYhJ,EAAOkJ,EACnBD,EAAUjJ,EAAOsJ,EAIrB,OAAOC,MAAMC,KAAK,CAAEvF,OAAQgF,EAAUD,EAAY,IAAK,SAACS,EAAGC,GAAJ,OAAUV,EAAYU,KDJvDC,CAAqB3J,EAAMC,EAAYwH,KAAKkB,UAEhE,OACE,kBAAC,EAAD,CACExE,YAAaA,EACbnE,KAAMA,EACNC,WAAYA,EACZmE,aAAcqD,KAAKrD,aACnBC,YAAaoD,KAAKpD,YAClBC,YAAamD,KAAKnD,YAClBC,YAAakD,KAAKlD,YAClBC,eAAgBiD,KAAKjD,qB,GA3CK2D,aA4D5BC,GAAqB,CACzBQ,eLPqB,SAAC7D,GAAD,OAAiB,SAACgB,EAAUC,GAAc,IAEjDhG,EACVgG,IADF9E,SAAYlB,KAIV+E,IAAgB/E,GAIpB+F,EAAS,CACPpF,KVvD4B,mBUwD5BC,QAASmE,OKFEuD,gBAfS,SAAC,GAA4B,IAA1BpH,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAInC,MAAO,CACLnB,KAJ2BkB,EAArBlB,KAKNC,WAL2BiB,EAAfjB,WAMZC,iBAL2BiB,EAArBjB,oBAa8BkI,GAAzBE,CAA6CI,IEjE/CkB,GAAM,WACjB,OACE,yBAAK9H,UAAU,gBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,OAEF,kBAAC,GAAD,SCLR+H,IAASC,OACP,kBAAC,IAAD,CAAUxI,MAAOA,GACf,kBAAC,IAAD,CAAazB,QAAS,kBAAC,EAAD,MAAa8B,UAAWA,GAC5C,kBAAC,GAAD,QAGJoI,SAASC,eAAe,W","file":"static/js/main.fd3a86d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgNotFound.dd0e6166.png\";","import {\n  FETCH_MOVIES_REQUEST,\n  FETCH_MOVIES_SUCCESS,\n  FETCH_MOVIES_FAILURE,\n  REMOVE_MOVIE,\n  TOGGLE_PROPERTY_WILL_WATCH_MOVIE,\n  RESET_PROPERTY_WILL_WATCH_MOVIE,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  movies: [],\n  loading: false,\n  error: null,\n};\n\nexport const movieListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_MOVIES_REQUEST:\n      return {\n        movies: [],\n        loading: true,\n        error: null,\n      };\n\n    case FETCH_MOVIES_SUCCESS:\n      return {\n        movies: action.payload, // movies с сервера\n        loading: false,\n        error: null,\n      };\n\n    case FETCH_MOVIES_FAILURE:\n      return {\n        movies: [],\n        loading: false,\n        error: action.payload,\n      };\n\n    case REMOVE_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.filter((movie) => movie.id !== action.payload),\n      };\n\n    case TOGGLE_PROPERTY_WILL_WATCH_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.map((movie) => {\n          if (movie.id === action.payload.id) {\n            return action.payload;\n          }\n          return movie;\n        }),\n      };\n\n    case RESET_PROPERTY_WILL_WATCH_MOVIE:\n      return {\n        ...state,\n        movies: state.movies.map((movie) => ({\n          ...movie,\n          willWatch: false,\n        })),\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  ADD_MOVIE_WILL_WATCH,\n  REMOVE_MOVIE_WILL_WATCH,\n  REMOVE_ALL_MOVIE_WILL_WATCH,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  movieWillWatch: [],\n};\n\nexport const movieWillWatchListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MOVIE_WILL_WATCH:\n      return {\n        movieWillWatch: [...state.movieWillWatch, action.payload],\n      };\n\n    case REMOVE_MOVIE_WILL_WATCH:\n      return {\n        movieWillWatch: state.movieWillWatch.filter(\n          (movie) => movie.id !== action.payload.id\n        ),\n      };\n\n    case REMOVE_ALL_MOVIE_WILL_WATCH:\n      return {\n        movieWillWatch: [],\n      };\n\n    default:\n      return state;\n  }\n};\n","import { SET_TOTAL_PAGES, SET_CURRENT_PAGE } from '../actions/actionTypes';\n\nconst initialState = {\n  page: 1,\n  totalPages: 0,\n};\n\nexport const pageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_TOTAL_PAGES:\n      return {\n        ...state,\n        totalPages: action.payload,\n      };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        page: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { FETCH_CHANGE_SORT_TYPE_BY_MOVIES } from '../actions/actionTypes';\n\nconst initialState = {\n  sortTypeByMovies: 'popularity', // дефолтное значение\n};\n\nexport const sortTypeByMovieReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CHANGE_SORT_TYPE_BY_MOVIES:\n      return {\n        sortTypeByMovies: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// Синхронизация LocalStore с Redux store\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport {\n  movieListReducer,\n  pageReducer,\n  sortTypeByMovieReducer,\n  movieWillWatchListReducer,\n} from './reducers';\n\n// Persisted - организовать долговременное хранение\n\n// Настройки redux-persist\nconst persistConfig = {\n  key: 'movieWillWatchList', // ключ по которому данные будут лежать в LocalStore\n  storage,\n};\n\nconst rootReducer = combineReducers({\n  movieList: movieListReducer,\n  pageInfo: pageReducer,\n  sortType: sortTypeByMovieReducer,\n  movieWillWatchList: persistReducer(persistConfig, movieWillWatchListReducer),\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\n);\n\nexport const persistor = persistStore(store);\n","// Начало загрузки\nexport const FETCH_MOVIES_REQUEST = 'FETCH_MOVIES_REQUEST';\n// Успешная загрузка (запись в state)\nexport const FETCH_MOVIES_SUCCESS = 'FETCH_MOVIES_SUCCESS';\n// В момент загрузки произошла ошибка\nexport const FETCH_MOVIES_FAILURE = 'FETCH_MOVIES_FAILURE';\n// Изменения метода серверной сортировки в момент отправки запроса\nexport const FETCH_CHANGE_SORT_TYPE_BY_MOVIES = 'FETCH_CHANGE_SORT_TYPE_BY_MOVIES';\n// Удаление фильма из каталоге фильмов\nexport const REMOVE_MOVIE = 'REMOVE_MOVIE';\n// Переключение свойства просмотра в каталоге все фильмов\nexport const TOGGLE_PROPERTY_WILL_WATCH_MOVIE = 'TOGGLE_PROPERTY_WILL_WATCH_MOVIE';\n// Все фильмы withWatch - false\nexport const RESET_PROPERTY_WILL_WATCH_MOVIE = 'RESET_PROPERTY_WILL_WATCH_MOVIE';\n\n// Установка выбранной страницы\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\n// Добавления фильма в список для просмотра\nexport const ADD_MOVIE_WILL_WATCH = 'ADD_MOVIE_WILL_WATCH';\n// Удаления фильма из списка для просмотра\nexport const REMOVE_MOVIE_WILL_WATCH = 'REMOVE_MOVIE_WILL_WATCH';\n// Удаления всех фильмов из списка для просмотра\nexport const REMOVE_ALL_MOVIE_WILL_WATCH = 'REMOVE_ALL_MOVIE_WILL_WATCH';\n\nexport const SET_TOTAL_PAGES = 'SET_TOTAL_PAGES';\n","import React from 'react';\n\nexport const Error = () => (\n  <div className='alert alert-warning' role='alert'>\n    Error\n  </div>\n);\n","import React from 'react';\n\nexport const Spinner = () => {\n  return (\n    <div className='d-flex justify-content-center'>\n      <div className='spinner-border m-5 ' role='status'>\n        <span className='sr-only'>Loading...</span>\n      </div>\n    </div>\n  );\n};\n","import React, { memo } from 'react';\n\nconst Button = ({ className = '', onClick, children }) => {\n  return (\n    <button type='button' className={`btn btn-sm ${className}`} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n\nexport default memo(Button);\n","import React from 'react';\nimport Button from '../Button/Button';\nimport imgNotFound from '../../img/imgNotFound.png';\n\nexport const MovieItem = ({\n  movie,\n  removeMovie,\n  onMovieAddedToWillWatch,\n  onMovieRemovedToWillWatch,\n}) => {\n  const toggleButton = movie.willWatch ? (\n    <Button className='btn-danger' onClick={onMovieRemovedToWillWatch}>\n      Remove Will Watch\n    </Button>\n  ) : (\n    <Button className='btn-success' onClick={onMovieAddedToWillWatch}>\n      Add Will Watch\n    </Button>\n  );\n\n  const imgPath = movie.backdrop_path || movie.poster_path;\n  const img = imgPath ? `https://image.tmdb.org/t/p/w500${imgPath}` : imgNotFound;\n\n  return (\n    <div className='card'>\n      <img className='card-img-top' src={img} alt={movie.title} />\n\n      <div className='card-body'>\n        <h6 className='card-title'>{movie.title}</h6>\n\n        <div className='d-flex justify-content-between align-items-start mb-4'>\n          <p className='mb-0'>Rating: {movie.vote_average}</p>\n\n          {toggleButton}\n        </div>\n\n        <Button className='btn-secondary' onClick={removeMovie}>\n          Delete Movie\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { MovieItem } from '../MovieItem/MovieItem';\n\nexport const MovieList = ({\n  movies,\n  movieRemoved,\n  movieAddedToWillWatch,\n  movieRemovedToWillWatch,\n}) => {\n  const onMovieAddedToWillWatch = (movie) => (_evt) => movieAddedToWillWatch(movie);\n\n  const onMovieRemovedToWillWatch = (movie) => (_evt) => movieRemovedToWillWatch(movie);\n\n  const onMovieRemoved = (id) => (_evt) => movieRemoved(id);\n\n  return (\n    <div className='row mt-4'>\n      {movies.map((movie) => {\n        return (\n          <div className='col-6 mb-4' key={movie.id}>\n            <MovieItem\n              movie={movie}\n              removeMovie={onMovieRemoved(movie.id)}\n              onMovieAddedToWillWatch={onMovieAddedToWillWatch(movie)}\n              onMovieRemovedToWillWatch={onMovieRemovedToWillWatch(movie)}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\n\nconst MovieTabs = ({ tabs, sortTypeByMovies, changeSortType }) => {\n  const handleClick = (sortType) => (_evt) => changeSortType(sortType);\n\n  const getClassActive = (sortType) =>\n    classNames('nav-link', { active: sortTypeByMovies === sortType });\n\n  return (\n    <ul className='tabs nav nav-pills'>\n      {tabs.map(({ sortType, label }) => (\n        <li className='nav-item' key={sortType}>\n          <div className={getClassActive(sortType)} onClick={handleClick(sortType)}>\n            {label}\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default memo(MovieTabs);\n","import React from 'react';\nimport Button from '../Button/Button';\n\nexport const MovieWillWatch = ({\n  movieWillWatch,\n  movieRemovedToWillWatch,\n  allMoviesDeletedToWillWatch,\n}) => {\n  const onMovieRemovedToWillWatch = (movie) => (_evt) => movieRemovedToWillWatch(movie);\n\n  const resetButton = movieWillWatch.length ? (\n    <Button className='btn-info mb-2' onClick={allMoviesDeletedToWillWatch}>\n      Reset\n    </Button>\n  ) : null;\n\n  return (\n    <div className='col-3'>\n      <h4>Will Watch: {movieWillWatch.length} movies</h4>\n\n      {resetButton}\n\n      <ul className='list-group list-group-flush'>\n        {movieWillWatch.map((movie) => (\n          <li key={movie.id} className='list-group-item'>\n            <div className='d-flex justify-content-between'>\n              <p>{movie.title}</p>\n              <p>{movie.vote_average}</p>\n            </div>\n\n            <Button className='btn-danger' onClick={onMovieRemovedToWillWatch(movie)}>\n              Deleted\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// export default MovieWillWatch;\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport const Pagination = ({\n  pageNumbers,\n  page,\n  totalPages,\n  setFirstPage,\n  setLastPage,\n  setNextPage,\n  setPrevPage,\n  setNumbersPage,\n}) => {\n  const handelClick = (fn, ...args) => (evt) => {\n    evt.preventDefault();\n    fn(...args);\n  };\n\n  // Функция для активации класса выбранной страницы\n  const getClass = (page, currentPage, className) =>\n    classNames('page-item', {\n      [className]: page === currentPage,\n    });\n\n  return (\n    <nav>\n      <ul className='pagination d-flex justify-content-center'>\n        <li className={getClass(1, page, 'disabled')}>\n          <a href='!#' className='page-link' onClick={handelClick(setFirstPage)}>\n            First\n          </a>\n        </li>\n\n        <li className={getClass(1, page, 'disabled')}>\n          <a href='!#' className='page-link' onClick={handelClick(setPrevPage)}>\n            <span aria-hidden='true'>&laquo;</span>\n          </a>\n        </li>\n\n        {pageNumbers.map((pageNumber) => (\n          <li key={pageNumber} className={getClass(pageNumber, page, 'active')}>\n            <a\n              href='!#'\n              className='page-link'\n              onClick={handelClick(setNumbersPage, pageNumber)}\n            >\n              {pageNumber}\n            </a>\n          </li>\n        ))}\n\n        {/* // Отключить если последняя стараница */}\n        <li className={getClass(totalPages, page, 'disabled')}>\n          <a href='!#' className='page-link' onClick={handelClick(setNextPage)}>\n            <span aria-hidden='true'>&raquo;</span>\n          </a>\n        </li>\n\n        <li className={getClass(totalPages, page, 'disabled')}>\n          <a href='!#' className='page-link' onClick={handelClick(setLastPage)}>\n            Last\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","// Переключатель свойства у выбранного фильма\nexport const togglePropertyWillWatch = (movie) => ({\n  ...movie,\n  willWatch: !movie.willWatch,\n});\n\nexport const checkPropertyWillWatch = (movies, movieWillWatch) => {\n  // Если список фильмов для просмотра пуст\n  if (!movieWillWatch.length) {\n    return movies;\n  }\n\n  // id всех фильмов добавленных в список для просмотра\n  const idMoviesWillWatch = movieWillWatch.map((item) => item.id);\n\n  // Новый массив movies с включенными свойством willWatch\n  return movies.reduce(\n    (newMovies, item) =>\n      idMoviesWillWatch.includes(item.id)\n        ? newMovies.concat({ ...item, willWatch: true })\n        : newMovies.concat(item),\n    []\n  );\n};\n","import {\n  FETCH_MOVIES_REQUEST,\n  FETCH_MOVIES_SUCCESS,\n  FETCH_MOVIES_FAILURE,\n  FETCH_CHANGE_SORT_TYPE_BY_MOVIES,\n  REMOVE_MOVIE,\n  TOGGLE_PROPERTY_WILL_WATCH_MOVIE,\n  RESET_PROPERTY_WILL_WATCH_MOVIE,\n  SET_CURRENT_PAGE,\n  ADD_MOVIE_WILL_WATCH,\n  REMOVE_MOVIE_WILL_WATCH,\n  REMOVE_ALL_MOVIE_WILL_WATCH,\n  SET_TOTAL_PAGES,\n} from './actionTypes';\n\nimport { togglePropertyWillWatch, checkPropertyWillWatch } from './actionsUtils';\n\n// Класс сервис\nimport { MovieService } from '../services/MovieService';\n\n// Начала загрузки (обнуления и спиннер)\nconst moviesRequested = () => ({\n  type: FETCH_MOVIES_REQUEST,\n});\n\n// Успешная загрузка, запись полученных данных в массив\nconst moviesLoaded = (movies) => ({\n  type: FETCH_MOVIES_SUCCESS,\n  payload: movies,\n});\n\n// Ошибка при загрузке\nconst moviesError = (error) => ({\n  type: FETCH_MOVIES_FAILURE,\n  payload: error,\n});\n\n// Удаления фильма из каталога всех фильмов\nconst movieRemoved = (movieId) => ({\n  type: REMOVE_MOVIE,\n  payload: movieId,\n});\n\n// Переключения свойства у фильма в каталоге всех фильмов\nconst movieToggleProperty = (movies) => ({\n  type: TOGGLE_PROPERTY_WILL_WATCH_MOVIE,\n  payload: movies,\n});\n\n// Сброс всех свойств в каталоге фильмов\nconst moviesResetProperty = () => ({\n  type: RESET_PROPERTY_WILL_WATCH_MOVIE,\n});\n\n// ! THUNK\n// Данные находятся в независимых Reducer при этом, они остаются взаимосвязанными\n// для того, чтобы работать с ними одновременно и обновлять в них актуальную информацию\n// используются Thunk - так через них можно получить весь Redux state\n\n// Переключения страниц\nconst setCurrentPage = (currentPage) => (dispatch, getState) => {\n  const {\n    pageInfo: { page },\n  } = getState();\n\n  // Если выбранная страница точна та же, что и в state ~ выход\n  if (currentPage === page) {\n    return;\n  }\n\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: currentPage,\n  });\n};\n\n// Установка количества всех страниц с сервера, необходима для пагинации\nconst setTotalPages = (total) => (dispatch, getState) => {\n  const {\n    pageInfo: { totalPages },\n  } = getState();\n\n  if (total === totalPages) {\n    return;\n  }\n\n  dispatch({\n    type: SET_TOTAL_PAGES,\n    payload: total,\n  });\n};\n\n// Метод серверной сортировки\nconst moviesChangeSort = (sortType) => ({\n  type: FETCH_CHANGE_SORT_TYPE_BY_MOVIES,\n  payload: sortType,\n});\n\n// Добавления в список фильмов для просмотра\nconst movieAddedToWillWatch = (movie) => (dispatch) => {\n  // willWatch true\n  const updateMovie = togglePropertyWillWatch(movie);\n\n  // Обновление списка фильмов, с переключенным состоянием willWatch\n  dispatch(movieToggleProperty(updateMovie));\n\n  dispatch({\n    type: ADD_MOVIE_WILL_WATCH,\n    payload: updateMovie,\n  });\n};\n\n// Удаление из списка фильмов для просмотра\nconst movieRemovedToWillWatch = (movie) => (dispatch) => {\n  // willWatch false\n  const updateMovie = togglePropertyWillWatch(movie);\n\n  // Обновление списка фильмов, с переключенным состоянием willWatch\n  dispatch(movieToggleProperty(updateMovie));\n\n  dispatch({\n    type: REMOVE_MOVIE_WILL_WATCH,\n    payload: movie,\n  });\n};\n\n// Удаление всех фильмов для просмотра\nconst allMoviesDeletedToWillWatch = () => (dispatch) => {\n  dispatch(moviesResetProperty());\n\n  dispatch({\n    type: REMOVE_ALL_MOVIE_WILL_WATCH,\n  });\n};\n\n// Класс Сервис\nconst movieService = new MovieService();\n\n// Получения асинхронных данных через Thunk\nconst getMovies = () => (dispatch, getState) => {\n  const {\n    sortType: { sortTypeByMovies },\n    pageInfo: { page },\n    movieWillWatchList: { movieWillWatch },\n  } = getState();\n\n  dispatch(fetchMovies(sortTypeByMovies, page, movieWillWatch));\n};\n\n// Загрузка данных\nconst fetchMovies = (sortTypeByMovies, page, movieWillWatch) => async (dispatch) => {\n  try {\n    // Загрузки, обнуление первоначального состояния и активация Spinner\n    dispatch(moviesRequested());\n\n    // Получения данных с Сервера\n    const { movies, totalPages } = await movieService.getResource(sortTypeByMovies, page);\n\n    // При загрузке страницы активируется свойство willWatch у тех фильмов которые\n    // находятся в списке для просмотра\n    const verifiedMovies = checkPropertyWillWatch(movies, movieWillWatch);\n\n    // Отправка загруженных данных в Reducer\n    dispatch(moviesLoaded(verifiedMovies));\n\n    dispatch(setTotalPages(totalPages));\n  } catch (error) {\n    dispatch(moviesError(error));\n  }\n};\n\nexport {\n  getMovies,\n  moviesChangeSort,\n  setCurrentPage,\n  movieRemoved,\n  movieAddedToWillWatch,\n  movieRemovedToWillWatch,\n  allMoviesDeletedToWillWatch,\n};\n","// export const API_URL = 'https://api.themoviedb.org/3';\n// export const API_KEY = '3f4ca4f3a9750da53450646ced312397';\n// export const SORT_BY = {\n// \tpopularity: 'popularity.desc',\n// \trevenue: 'revenue.desc',\n// \tvoteAverage: 'vote_average.desc'\n// };\n\nexport class MovieService {\n  _apiUrl = 'https://api.themoviedb.org/3';\n  _apiKey = '3f4ca4f3a9750da53450646ced312397';\n\n  // Свойства серверной сортировки\n  _apiSort = {\n    // Сортировка по Популярности\n    popularity: 'popularity.desc',\n    // Сортировка по Доходности\n    revenue: 'revenue.desc',\n    // Сортировка по среднемним показателям\n    voteAverage: 'vote_average.desc',\n    // Дефолт сортировка\n    default: 'popularity.desc',\n  };\n\n  // Основная функция получения данных\n  getResource = async (sortType, page) => {\n    // По какому значению будет отфильтрован запрос\n    const sort = this.getSortTypes(sortType);\n\n    const response = await fetch(\n      `${this._apiUrl}/discover/movie?api_key=${this._apiKey}&sort_by=${sort}&page=${page}`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${this._apiUrl}, received ${response.status}`);\n    }\n\n    // Чистые данные с сервера\n    const data = await response.json();\n\n    // Преобразования данных в необходимый формат для Redux\n    return this.cleanData(data);\n  };\n\n  // Переименовываю  данные и добавляю значение свойство в willwatch в массив фильмов\n  cleanData({ total_pages, results, total_results, ...otherDataProperty }) {\n    return {\n      movies: this.addPropertyWillWatch(results),\n      totalPages: total_pages,\n      totalResults: total_results,\n      ...otherDataProperty,\n    };\n  }\n\n  addPropertyWillWatch(results) {\n    return results.map((movie) => ({\n      ...movie,\n      willWatch: false,\n    }));\n  }\n\n  // Сортировка запроса, по ключу объекта\n  getSortTypes(sortType) {\n    return this._apiSort[sortType] || this._apiSort['default'];\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Spinner, Error, MovieList } from '../../components';\n\nimport {\n  getMovies,\n  movieRemoved,\n  movieAddedToWillWatch,\n  movieRemovedToWillWatch,\n} from '../../actions';\n\n// # Компонент Контейнер - отвечает за Логику, но не за отображения\nclass MovieListContainer extends Component {\n  componentDidMount() {\n    this.updateMovies();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.sortTypeByMovies !== this.props.sortTypeByMovies ||\n      prevProps.page !== this.props.page\n    ) {\n      this.updateMovies();\n    }\n  }\n\n  updateMovies() {\n    // Можно передать любые параметры в Thunk через компонент во время вызова\n    this.props.getMovies();\n  }\n\n  render() {\n    // Props из Redux Store через mapStateToProps\n    // # 4) После обновления state, через dispatch action,\n    // загружаются данные и обновляется компонент с этими данными\n    const {\n      movies,\n      loading,\n      error,\n      movieAddedToWillWatch,\n      movieRemovedToWillWatch,\n      movieRemoved,\n    } = this.props;\n\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return <Error />;\n    }\n\n    // console.log(addMovieWillWatch);\n\n    return (\n      <MovieList\n        movies={movies}\n        movieAddedToWillWatch={movieAddedToWillWatch}\n        movieRemovedToWillWatch={movieRemovedToWillWatch}\n        movieRemoved={movieRemoved}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ movieList, pageInfo, sortType }) => {\n  const { movies, loading, error } = movieList;\n  const { page } = pageInfo;\n  const { sortTypeByMovies } = sortType;\n\n  return {\n    movies,\n    loading,\n    error,\n    page,\n    sortTypeByMovies,\n  };\n};\n\nconst mapDispatchToProps = {\n  getMovies,\n  movieRemoved,\n  movieAddedToWillWatch,\n  movieRemovedToWillWatch,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieListContainer);\n","import React, { Component } from 'react';\nimport { MovieTabs } from '../../components';\nimport { connect } from 'react-redux';\nimport { moviesChangeSort } from '../../actions';\n\nclass MovieTabsContainer extends Component {\n  // sortType - тип серверной сортировки, label - название\n  tabs = [\n    { sortType: 'popularity', label: 'Popularity' },\n    { sortType: 'revenue', label: 'Revenue desc' },\n    { sortType: 'voteAverage', label: 'Vote average' },\n  ];\n\n  changeSortType = (sortType) => {\n    // Не вызывать события при одинаковом типе серверной сортировки в Redux state и выбранном\n    if (this.props.sortTypeByMovies === sortType) {\n      return;\n    }\n\n    this.props.moviesChangeSort(sortType);\n  };\n\n  render() {\n    return (\n      <MovieTabs\n        tabs={this.tabs}\n        sortTypeByMovies={this.props.sortTypeByMovies}\n        changeSortType={this.changeSortType}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ sortType: { sortTypeByMovies } }) => ({\n  sortTypeByMovies,\n});\n\nconst mapDispatchToProps = {\n  moviesChangeSort,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTabsContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { movieRemovedToWillWatch, allMoviesDeletedToWillWatch } from '../../actions';\nimport { MovieWillWatch } from '../../components';\n\n// # Компонент Контейнер - отвечает за Логику, но не за отображения\nclass MovieWillWatchContainer extends Component {\n  render() {\n    const {\n      movieWillWatch,\n      movieRemovedToWillWatch,\n      allMoviesDeletedToWillWatch,\n    } = this.props;\n\n    return (\n      <MovieWillWatch\n        movieWillWatch={movieWillWatch}\n        movieRemovedToWillWatch={movieRemovedToWillWatch}\n        allMoviesDeletedToWillWatch={allMoviesDeletedToWillWatch}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ movieWillWatchList: { movieWillWatch } }) => ({\n  movieWillWatch,\n});\n\nconst mapDispatchToProps = {\n  movieRemovedToWillWatch,\n  allMoviesDeletedToWillWatch,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieWillWatchContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setCurrentPage } from '../../actions';\nimport { getPaginationNumbers } from './getPaginationNumbers';\nimport { Pagination } from '../../components';\n\nclass PaginationContainer extends Component {\n  maxPages = 10;\n\n  setFirstPage = () => {\n    const firstPage = 1;\n    this.props.setCurrentPage(firstPage);\n  };\n\n  setLastPage = () => {\n    const { totalPages, setCurrentPage } = this.props;\n    setCurrentPage(totalPages);\n  };\n\n  setNextPage = () => {\n    const { setCurrentPage, page, totalPages } = this.props;\n    const nextPage = Math.min(page + 1, totalPages);\n    setCurrentPage(nextPage);\n  };\n\n  setPrevPage = () => {\n    const { page, setCurrentPage } = this.props;\n    const firstPage = 1;\n    const prevPage = Math.max(page - 1, firstPage);\n    setCurrentPage(prevPage);\n  };\n\n  setNumbersPage = (currentPage) => {\n    this.props.setCurrentPage(currentPage);\n  };\n\n  render() {\n    const { page, totalPages } = this.props;\n    const pageNumbers = getPaginationNumbers(page, totalPages, this.maxPages);\n\n    return (\n      <Pagination\n        pageNumbers={pageNumbers}\n        page={page}\n        totalPages={totalPages}\n        setFirstPage={this.setFirstPage}\n        setLastPage={this.setLastPage}\n        setNextPage={this.setNextPage}\n        setPrevPage={this.setPrevPage}\n        setNumbersPage={this.setNumbersPage}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ pageInfo, sortType }) => {\n  const { page, totalPages } = pageInfo;\n  const { sortTypeByMovies } = sortType;\n\n  return {\n    page,\n    totalPages,\n    sortTypeByMovies,\n  };\n};\n\nconst mapDispatchToProps = {\n  setCurrentPage,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PaginationContainer);\n","// https://www.cronj.com/blog/reactjs-pagination/\n\nexport function getPaginationNumbers(page, totalPages, maxPages = 10) {\n  // Пример если страница 7\n  // Она больше чем больше чем половины размера страниц (10)\n  // Отсчет начинается с выбранной страницы (7) - (10 / 2) = 2\n  // Отсчет заканчивается с выбранной страницы (7) + ((10 / 2) - 1) = 11\n\n  let startPage;\n  let endPage;\n\n  const middle = Math.floor(maxPages / 2);\n\n  const right = middle + 1;\n  const left = middle - 1;\n\n  // Если выбранная страница меньше или равно максимальному размеру страниц\n  if (totalPages <= maxPages) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // Если выбранная страница меньше чем серидина + 1\n    if (page <= right) {\n      startPage = 1;\n      endPage = maxPages;\n\n      // Если выбранная страница + середина - 1 меньше или равна количеству всех страниц\n      // 7 + (10 / 2 = 5 - 1 = 4) >= 500\n    } else if (page + left >= totalPages) {\n      startPage = totalPages - (maxPages - 1);\n      endPage = totalPages;\n\n      // Если выбранная страница больше чем серидина + 1\n    } else {\n      // Необходимо для правильно колличества страниц при четных числах и нечетных\n      const compensationEnd = maxPages % 2 !== 0 ? middle : left;\n\n      startPage = page - middle;\n      endPage = page + compensationEnd;\n    }\n  }\n\n  return Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);\n}\n\n/*\n\t else {\n\t\t\t// Необходимо для правильно колличества страниц при четных числах и нечетных\n\t\t\tconst compensation = maxPages % 2 === 0 ? middle : right;\n\n\t\t\tstartPage = page - compensation;\n\t\t\t// startPage = page - right;\n\t\t\t// 7 + 4 = 11\n\t\t\tendPage = page + left;\n\t\t}\n\n*/\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport { MovieTabs, MovieList, Pagination, MovieWillWatch } from '../../containers';\n\nexport const App = () => {\n  return (\n    <div className='container-md'>\n      <div className='row pt-4'>\n        <div className='col-9'>\n          <MovieTabs />\n          <MovieList />\n          <Pagination />\n        </div>\n        <MovieWillWatch />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store, persistor } from './store';\nimport { Provider } from 'react-redux';\n// Синхронизация LocalStore с Redux store\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { App } from './components/App/App';\nimport { Spinner } from './components';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Spinner />} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}